AWSTemplateFormatVersion: 2010-09-09
Description: Fargate Task Example CloudFormation template
Parameters:
  TaskName:
    Type: String
  ContainerImage:
    Type: String
Resources:
  AssetBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref 'AWS::StackName'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  AssetBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetBucket
      PolicyDocument:
        Statement:
          - Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join [ '', ['arn:', !Ref 'AWS::Partition', ':s3:::', !Ref AssetBucket, '/*'] ]
              - !Join [ '', ['arn:', !Ref 'AWS::Partition', ':s3:::', !Ref AssetBucket] ]
            Condition:
              Bool:
                'aws:SecureTransport': false
  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub '${AWS::StackName}/${TaskName}'
      ImageScanningConfiguration: 
        ScanOnPush: true
  FargateTasksCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref 'AWS::StackName'
      CapacityProviders:
        - FARGATE
      Tags: []
  FargateTasksLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      Tags: []
  FargateIamExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-execution-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole'
      Tags: []
  FargateIamTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-task-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AssetBucketObjectsWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - 'arn:aws:s3:::*'
                  - 'arn:aws:s3:::*/*'
                  - !Join [ '', ['arn:aws:s3:::', !Ref AssetBucket] ]
                  - !Join [ '', ['arn:aws:s3:::', !Ref AssetBucket, '/*'] ]
      ManagedPolicyArns: []
      Tags: []
  FargateTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: !Ref TaskName
          Image: !Ref ContainerImage
          Environment:
            - Name: BUCKET
              Value: !Ref 'AWS::StackName'
            - Name: AREA
              Value: monaco
          EntryPoint: []
          Command: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref FargateTasksLogGroup
              awslogs-stream-prefix: fargate
      Family: !Ref TaskName
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref FargateIamExecutionRole
      TaskRoleArn: !Ref FargateIamTaskRole
      RequiresCompatibilities:
        - FARGATE
      Memory: 8GB
      Cpu: 4096
      Tags: []
Outputs:
  AssetBucketName:
    Value: !Ref AssetBucket
  FargateTaskArn:
    Value: !Ref FargateTask
